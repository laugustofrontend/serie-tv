{"version":3,"sources":["components/Menu/Menu.js","App/App.js","serviceWorker.js","index.js"],"names":["links","name","path","Menu","props","react_default","a","createElement","react","className","pathname","window","location","map","link","key","verify","getPathName","Link","to","renderLink","Home","lazy","__webpack_require__","e","then","bind","About","Dashboard","Attractions","Promise","all","App","BrowserRouter","fallback","components_Menu_Menu","Switch","Route","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QAGMA,EAAQ,CACV,CAAEC,KAAM,OAAQC,KAAM,KACtB,CAAED,KAAM,cAAeC,KAAM,gBAC7B,CAAED,KAAM,QAASC,KAAM,UACvB,CAAED,KAAM,WAAYC,KAAM,eA6BfC,EAZF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAdX,WACf,IAAMC,EAAWC,OAAOC,SAASF,SAEjC,OAAOV,EAAMa,IAAI,SAAAC,GAAI,OACjBT,EAAAC,EAAAC,cAAA,MAAIQ,IAAKD,EAAKb,KAAMQ,UARR,SAACC,EAAUM,GAC3B,OAAON,IAAaM,EAAS,SAAU,GAOHC,CAAYP,EAAUI,EAAKZ,OACvDG,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,GAAIL,EAAKZ,MAAOY,EAAKb,SAUjBmB,QCrBhBC,EAAOC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAClBC,EAAQL,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACnBE,EAAYN,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACvBG,EAAcP,eAAK,kBAAMQ,QAAAC,IAAA,CAAAR,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAqBhBM,EAnBH,kBACV3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAU0B,SAAW7B,EAAAC,EAAAC,cAAA,6BACnBF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAC4B,EAAD,OAGF9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACpC,KAAK,IAAIqC,UAAYlB,IAClChB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOnC,KAAK,eAAeqC,UAAYV,IACvCxB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOnC,KAAK,SAASqC,UAAYZ,IACjCtB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOnC,KAAK,aAAaqC,UAAYX,SCb3BY,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCTNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.0e148e3b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst links = [\n    { name: 'Home', path: '/' },\n    { name: 'Attractions', path: '/attractions' },\n    { name: 'About', path: '/about' },\n    { name: 'Dasboard', path: '/dashboard' },\n]\n\nconst getPathName = (pathname, verify) => {\n    return pathname === verify ? 'active': '';\n}\n\nconst renderLink = () => {\n    const pathname = window.location.pathname;\n\n    return links.map(link => (\n        <li key={link.name} className={ getPathName(pathname, link.path) }>\n            <Link to={link.path}>{link.name}</Link>\n        </li>\n    ));\n}\n\nconst Menu = props => (\n    <Fragment>\n        <nav className='navbar navbar-default'>\n            <div className='container-fluid'>\n                <ul className='nav navbar-nav'>\n                    { renderLink() }\n                </ul>\n            </div>\n        </nav>\n    </Fragment>\n)\n\nexport default Menu\n","import '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './App.css';\n\nimport React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Menu from '../components/Menu/Menu';\n\nconst Home = lazy(() => import('../pages/home/Home'));\nconst About = lazy(() => import('../pages/about/About'));\nconst Dashboard = lazy(() => import('../pages/dashboard/Dashboard'));\nconst Attractions = lazy(() => import('../components/Attractions/Attractions'));\n\nconst App = () => (\n  <div className=\"container-fluid\">\n    <Router>\n      <Suspense fallback={ <div>Carregando...</div> }>\n        <header className=\"header row\">\n          <Menu />\n        </header>\n\n        <Switch>\n          <Route exact path=\"/\" component={ Home } />\n          <Route path=\"/attractions\" component={ Attractions } />\n          <Route path=\"/about\" component={ About } />\n          <Route path=\"/dashboard\" component={ Dashboard } />\n        </Switch>\n      </Suspense>\n    </Router>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\n// import Routes from './Config/Routes/Route';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}